import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        kotlin_version = '1.1.4'
        bukkit_version = '1.12.1-R0.1-SNAPSHOT'
        plugin_version = '1.0.0-SNAPSHOT'
    }

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.15"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "2.0.1"
    id 'net.minecrell.licenser' version '0.3'
}

apply plugin: 'kotlin'
apply plugin: 'net.minecrell.licenser'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven'

group 'com.dumptruckman.bukkit'
version "$plugin_version"

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        url "http://repo.bstats.org/content/repositories/releases/"
    }
    maven {
        url "http://nexus.okkero.com/repository/maven-releases/"
    }
    maven {
        url "http://repo.onarandombox.com/content/groups/public/"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.16'
    compile "org.bstats:bstats-bukkit:1.1"
    compile "com.okkero.skedule:skedule:1.2.2"
    compile 'io.github.microutils:kotlin-logging:1.4.6'
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'ch.qos.logback:logback-classic:1.1.3'

    compileOnly "org.bukkit:bukkit:$bukkit_version"
    compileOnly "com.dumptruckman.bukkit:SpringJdbcLib:1.1"

    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version:'1.6.1'
    testCompile group: 'org.powermock', name: 'powermock-api-easymock', version:'1.6.1'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version:'1.6.1'
    testCompile group: 'org.easymock', name: 'easymock', version:'3.4'
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile "org.bukkit:bukkit:$bukkit_version"
    testCompile "com.dumptruckman.bukkit:SpringJdbcLib:1.0"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

license {
    header project.file('license/HEADER.txt')
    include '**/*.kt'
    newLine false
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

processResources {
    filter ReplaceTokens, tokens: [
            "plugin_version": project.property("plugin_version").toString()
    ]
}

jar.finalizedBy shadowJar

shadowJar {
    baseName = project.name
    classifier = null
    relocate 'org.bstats', 'bstats.playtimeplus'
    relocate 'com.okkero.skedule', 'skedule.playtimeplus'
    relocate 'kotlin.', 'kotlin.playtimeplus.'
    relocate 'kotlinx.', 'kotlinx.playtimeplus.'
    relocate 'ch.qos.logback', 'logback.playtimeplus'
    relocate 'mu', 'mu.playtimeplus'
    relocate 'org.jetbrains.annotations', 'jetbrains.annotations.playtimeplus'
    relocate 'org.intellij.lang.annotations', 'intellij.annotations.playtimeplus'
    relocate 'org.slf4j', 'slf4j.playtimeplus'
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
    from "${projectDir}/LICENSE.md"
}

task javadocJar(type: Jar) {
    classifier 'javadoc'
    from dokka
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def installer = install.repositories.mavenInstaller
if (project.hasProperty('mavenUser') && project.hasProperty('mavenPassword')) {
    shadowJar.dependsOn checkLicenses
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "http://repo.onarandombox.com/content/repositories/thirdparty/") {
                    authentication(userName: mavenUser, password: mavenPassword)
                }
                snapshotRepository(url: "http://repo.onarandombox.com/content/repositories/thirdparty-dev/") {
                    authentication(userName: mavenUser, password: mavenPassword)
                }
            }
        }
    }

    def deployer = uploadArchives.repositories.mavenDeployer
    [installer, deployer]*.pom*.whenConfigured {pom ->
        pom.dependencies.removeAll { it.groupId == 'org.bstats' || it.groupId == 'com.okkero.skedule' || it.groupId == 'org.jetbrains.kotlin'  || it.groupId == 'org.jetbrains.kotlinx' }
    }
} else {
    [installer]*.pom*.whenConfigured {pom ->
        pom.dependencies.removeAll { it.groupId == 'org.bstats' || it.groupId == 'com.okkero.skedule' || it.groupId == 'org.jetbrains.kotlin'  || it.groupId == 'org.jetbrains.kotlinx' }
    }
}